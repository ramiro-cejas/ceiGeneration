.CODE
PUSH Method_main@Main # We put main method's tag at the top of the stack
CALL # We jump to main method
HALT # End of program.
malloc: LOADFP
LOADSP
STOREFP
LOADHL
DUP
PUSH 1
ADD
STORE 4
LOAD 3
ADD
STOREHL
STOREFP
RET 1
.DATA
str_empty: DW 0
.DATA
VT@Object: NOP # This class doesnt have any dynamic methods

.CODE
Method_debugPrint@Object: LOADFP # We store the dynamic link
LOADSP # We signal were the AR starts
STOREFP # We signal the AR being built as the current AR
LOAD 3 # We put the parameter i at the top of the stack (offset is hard-coded)
IPRINT # We print the integer we just loaded
PRNLN # We print the carriage return
STOREFP # We point FP to caller's AR
RET 1 # We free up memory cells equal to number of params [+1 if unit is dynamic]

.CODE
Constructor@Object: LOADFP # We store the dynamic link
LOADSP # We signal were the AR starts
STOREFP # We signal the AR being built as the current AR
STOREFP # We point FP to caller's AR
RET 1 # We free up memory cells equal to number of params [+1 if unit is dynamic]
.DATA
VT@String: NOP # This class doesnt have any dynamic methods

.CODE
Constructor@String: LOADFP # We store the dynamic link
LOADSP # We signal were the AR starts
STOREFP # We signal the AR being built as the current AR
LOAD 3
PUSH str_empty # We put the empty String tag at the top of the stack
STOREREF 1 # We link the 'fake attribute' to the empty string tag (attribute is hardcoded)
STOREFP # We point FP to caller's AR
RET 1 # We free up memory cells equal to number of params [+1 if unit is dynamic]
.DATA
VT@Main: NOP # This class doesnt have any dynamic methods

.CODE
Method_main@Main: LOADFP # We store the dynamic link
LOADSP # We signal were the AR starts
STOREFP # We signal the AR being built as the current AR
RMEM 1 # Reserving space for block local vars
.DATA
str_12: DW """,0
.CODE
RMEM 1 # In String Literal: We reserve a memory cell to store the pointer to the constructed object
PUSH 2 # In String Literal: We load malloc's parameter (hardcoded)
PUSH malloc # We put malloc's tag on top of the stack
CALL # We make the call
DUP # We duplicate malloc's return so we don't lose it on our next instr.
PUSH VT@String # We push the VTable's tag so we can link it to the CIR.
STOREREF 0 # We store the reference (tag) to the VTable in the CIR of the constructed object (the offset is hard-coded)
DUP # We duplicate malloc's return and we use it as the 'this' reference for the constructor
PUSH str_12 # We put the String tag at the top of the stack
STOREREF 1 # We link the tag to the 'fake attribute'
STORE 0 # We store what's on top of the pile in the stack through localvar's offset
LOAD 0 # We get the variable from the stack through its offset
PUSH Method_printSln@System # We push the static method's tag to the top of the stack
CALL # We make the call.
FMEM 1 # Freeing space reserved for block local vars
STOREFP # We point FP to caller's AR
RET 0 # We free up memory cells equal to number of params [+1 if unit is dynamic]

.CODE
Constructor@Main: LOADFP # We store the dynamic link
LOADSP # We signal were the AR starts
STOREFP # We signal the AR being built as the current AR
STOREFP # We point FP to caller's AR
RET 1 # We free up memory cells equal to number of params [+1 if unit is dynamic]
.DATA
VT@System: NOP # This class doesnt have any dynamic methods

.CODE
Method_printC@System: LOADFP # We store the dynamic link
LOADSP # We signal were the AR starts
STOREFP # We signal the AR being built as the current AR
LOAD 3 # We put the parameter i at the top of the stack (offset is hard-coded)
CPRINT # We print the char we just loaded
STOREFP # We point FP to caller's AR
RET 1 # We free up memory cells equal to number of params [+1 if unit is dynamic]

.CODE
Method_printS@System: LOADFP # We store the dynamic link
LOADSP # We signal were the AR starts
STOREFP # We signal the AR being built as the current AR
LOAD 3 # We put the parameter i at the top of the stack (offset is hard-coded)
LOADREF 1 # We load the 'fake attribute' through the this reference and the offset (hardcoded)
SPRINT # We print the string we just loaded
STOREFP # We point FP to caller's AR
RET 1 # We free up memory cells equal to number of params [+1 if unit is dynamic]

.CODE
Method_println@System: LOADFP # We store the dynamic link
LOADSP # We signal were the AR starts
STOREFP # We signal the AR being built as the current AR
PRNLN # We print the carriage return
STOREFP # We point FP to caller's AR
RET 0 # We free up memory cells equal to number of params [+1 if unit is dynamic]

.CODE
Method_printCln@System: LOADFP # We store the dynamic link
LOADSP # We signal were the AR starts
STOREFP # We signal the AR being built as the current AR
LOAD 3 # We put the parameter i at the top of the stack (offset is hard-coded)
CPRINT # We print the char we just loaded
PRNLN # We print the carriage return
STOREFP # We point FP to caller's AR
RET 1 # We free up memory cells equal to number of params [+1 if unit is dynamic]

.CODE
Method_printSln@System: LOADFP # We store the dynamic link
LOADSP # We signal were the AR starts
STOREFP # We signal the AR being built as the current AR
LOAD 3 # We put the parameter i at the top of the stack (offset is hard-coded)
LOADREF 1 # We load the 'fake attribute' of string that has the pointer to data
SPRINT # We print the String we just loaded
PRNLN # We print the carriage return
STOREFP # We point FP to caller's AR
RET 1 # We free up memory cells equal to number of params [+1 if unit is dynamic]

.CODE
Method_read@System: LOADFP # We store the dynamic link
LOADSP # We signal were the AR starts
STOREFP # We signal the AR being built as the current AR
READ # We read the next integer value on the input stream.
PUSH 48 # We push 48 because the integer 0 is represented by the char number 48 in the ASCII table
SUB # We subtract that 'ASCII Offset' to get the real number
STORE 3 # We save the return value in the space reserved for it (offset is hard-coded)
STOREFP # We point FP to caller's AR
RET 0 # We free up memory cells equal to number of params [+1 if unit is dynamic]

.CODE
Method_printB@System: LOADFP # We store the dynamic link
LOADSP # We signal were the AR starts
STOREFP # We signal the AR being built as the current AR
LOAD 3 # We put the parameter i at the top of the stack (offset is hard-coded)
BPRINT # We print the boolean we just loaded
STOREFP # We point FP to caller's AR
RET 1 # We free up memory cells equal to number of params [+1 if unit is dynamic]

.CODE
Method_printIln@System: LOADFP # We store the dynamic link
LOADSP # We signal were the AR starts
STOREFP # We signal the AR being built as the current AR
LOAD 3 # We put the parameter i at the top of the stack (offset is hard-coded)
IPRINT # We print the integer we just loaded
PRNLN # We print the carriage return
STOREFP # We point FP to caller's AR
RET 1 # We free up memory cells equal to number of params [+1 if unit is dynamic]

.CODE
Method_printI@System: LOADFP # We store the dynamic link
LOADSP # We signal were the AR starts
STOREFP # We signal the AR being built as the current AR
LOAD 3 # We put the parameter i at the top of the stack (offset is hard-coded)
IPRINT # We print the integer we just loaded
STOREFP # We point FP to caller's AR
RET 1 # We free up memory cells equal to number of params [+1 if unit is dynamic]

.CODE
Method_printBln@System: LOADFP # We store the dynamic link
LOADSP # We signal were the AR starts
STOREFP # We signal the AR being built as the current AR
LOAD 3 # We put the parameter i at the top of the stack (offset is hard-coded)
BPRINT # We print the boolean we just loaded
PRNLN # We print the carriage return
STOREFP # We point FP to caller's AR
RET 1 # We free up memory cells equal to number of params [+1 if unit is dynamic]

.CODE
Constructor@System: LOADFP # We store the dynamic link
LOADSP # We signal were the AR starts
STOREFP # We signal the AR being built as the current AR
STOREFP # We point FP to caller's AR
RET 1 # We free up memory cells equal to number of params [+1 if unit is dynamic]
